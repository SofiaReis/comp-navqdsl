/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(NavqParser)package parser;import java.io.*;import java.util.Hashtable;import java.util.Enumeration;import org.jgrapht.*;import org.jgrapht.alg.*;import org.jgrapht.graph.*;import java.util.List;import java.util.ArrayList;import java.util.regex.Matcher;import org.jgrapht.traverse.*;import java.util.Collections;import java.net.*;public class NavqParser{  public static Hashtable ST = new Hashtable();  public static String missedDouble = "";  public static Hashtable getHashTable()  {    return ST;  }  public void PrintWarnings()  {    if (missedDouble != "") System.out.println("Warning: You've missed doublepoint, in the following situation " + missedDouble);  }}PARSER_END(NavqParser)SKIP :{  " "| "\r"| "\t"}//Static Tokens
TOKEN :{  < NUMBER : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >| < CRITERIA_TYPE :    "shortest"  | "fastest" >| < QUOTED :    "\""    (      "\\" ~[ ] //any escaped character
    | //or
      ~[ "\"", "\\" ] //any character except quote or backslash
    )*    "\"" >| < DOUBLEPOINT : ":" >| < LF : "\n" >}//Reserved Words
TOKEN :{  < OUTPUT : "Output" >| < PATHS : "paths" >| < PLACES : "places" >| < FROM : "from" >| < TO : "to" >| < CRITERIA : "criteria" >| < WITH : "with" >| < DISTANCE : "distance" >}//Operators
TOKEN :{  < COMPARE :    "<="  | ">="  | "="  | "<"  | ">" >}SimpleNode Start() :{}{  output()  {    return jjtThis;  }}void output() :{}{  try  {    < OUTPUT >  }  catch (TokenMgrError e)  {    System.out.println("ERROR: You Should use the next queries:");    System.out.println("       Output <number> paths from \"<startVertexID>\" to \"<endVertexID>\": criteria: <shortest/fastest>");    System.out.println("       Output places with distance <compareSign> <number> places from \"<startVertexID>\"");    System.exit(0);  }  catch (ParseException e)  {    System.out.println("PARSER ERROR: OUTPUT missing.");    System.exit(0);  }  try  {    (numberOfPaths()  | placesAtDistance())  }  catch (TokenMgrError e)  {    System.out.println("ERROR: You failed choosing the query:");    System.out.println("       Output");    System.out.println("              [<number> paths from \"<startVertexID>\" to \"<endVertexID>\": criteria: <shortest/fastest>]");    System.out.println("       OR   ");    System.out.println("              [places with distance <compareSign> <number> places from \"<startVertexID>\"]");    System.exit(0);  }  < LF >}void numberOfPaths() :{  Token t1, t2 = null;}{  number()  try  {    < PATHS >  }  catch (ParseException e)  {    System.out.println("PARSER ERROR: < paths > missing.");    System.exit(0);  }  try  {    < FROM >  }  catch (ParseException e)  {    System.out.println("PARSER ERROR: < from > missing.");    System.exit(0);  }  places()  (    (      t1 = < DOUBLEPOINT > try      {        < CRITERIA >      }      catch (ParseException e)      {        System.out.println("PARSER ERROR: < criteria > missing.");        System.exit(0);      }    )  | t1 = < CRITERIA >  )  {    if (t1.image != ":")    {      missedDouble += " < : criteria > ";    }  }  (    (      t2 = < DOUBLEPOINT > criteriaType()    )  | criteriaType()  )  {    try    {      if (t2.image != ":")      {        missedDouble += " <  criteria: > ";      }    }    catch (NullPointerException e)    {      missedDouble += " <  criteria: > ";    }  }}void placesAtDistance() :{}{
  try  {      < PLACES > }
  catch (ParseException e)
  {
    System.out.println("PARSER ERROR: < places > missing.");
    System.exit(0);
  }
  try  {    < WITH > }
  catch (ParseException e)
  {
    System.out.println("PARSER ERROR: < with > missing.");
    System.exit(0);
  }
  try  {    < DISTANCE > }
  catch (ParseException e)
  {
    System.out.println("PARSER ERROR: < distance > missing.");
    System.exit(0);
  }compareSign() number()
  try  {    < PLACES > }
  catch (ParseException e)
  {
    System.out.println("PARSER ERROR: < places > missing.");
    System.exit(0);
  }
  try  {    < FROM > }
  catch (ParseException e)
  {
    System.out.println("PARSER ERROR: < from > missing.");
    System.exit(0);
  }place()}void compareSign() :{  Token t;}{  try  {    t = < COMPARE >    {      jjtThis.value = t.image;      //System.out.println(t.image);
      ST.put(t.image, new STC("compare", t.image));    }  }  catch (TokenMgrError e)  {    System.out.println("ERROR: Invalid compare sign!");    System.exit(0);  }}void places() :{}{  try  {    place()  }  catch (TokenMgrError e)  {    System.out.println("ERROR: Invalid departure place. Should be in format \"[place]\"!");    System.exit(0);  }  try  {    < TO >  }  catch (ParseException e)  {    System.out.println("PARSER ERROR: < to > missing.");    System.exit(0);  }  try  {    place()  }  catch (TokenMgrError e)  {    System.out.println("ERROR: Invalid arrival place. Should be in format \"[place]\"!");    System.exit(0);  }}void place() :{  Token t;}{
  try  {      (    t = < QUOTED >  {    jjtThis.value = t.image;    //	System.out.println(t.image);
    ST.put(t.image, new STC("place", t.image));  }
  )}
    catch (ParseException e)
  {
    System.out.println("PARSER ERROR: Place to evaluate missing. E.g. \"1\"");
    System.exit(0);
  }}void number() :{  Token t;}{  try  {    (    t = < NUMBER >    {      jjtThis.value = t.image;      //System.out.println(t.image);
      ST.put(t.image, new STC("number", t.image));    }    )
    }  catch (ParseException e)  {    System.out.println("PARSER ERROR: Number missing. Waiting for an Integer!");    System.exit(0);  }  catch (TokenMgrError e)  {    System.out.println("TOKEN ERROR: Invalid number. Waiting for an Integer!");    System.exit(0);  }}void criteriaType() :{  Token t;}{  try  {    (t = < CRITERIA_TYPE >    {      jjtThis.value = t.image;      //System.out.println(t.image);
      ST.put(t.image, new STC("criteria_type", t.image));    }    )  }  catch (TokenMgrError e)  {    System.out.println("TOKEN ERROR: Invalid criteria type. Waiting for criteria:shortest or fastest!");    System.exit(0);  }  catch (ParseException e)  {    System.out.println("PARSER ERROR: Criteria type missing. Waiting for criteria:shortest or fastest!");    System.exit(0);  }}