/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(NavqParser)package parser;

public class NavqParser{  public static void main(String args []) throws ParseException  {    NavqParser parser = new NavqParser(System.in);
    SimpleNode root = parser.Start();
    root.dump("");
      }}PARSER_END(NavqParser)SKIP :{  " "| "\r"| "\t"| "\n"}
//static tokensTOKEN :{ < NUMBER: (<DIGIT>)+>
|  <#DIGIT: ["0"-"9"]>
| < CRITERIA_TYPE: "shortest" | "fastest" >
| <QUOTED: 
    "\"" 
    (
         "\\" ~[]     //any escaped character
    |                 //or
        ~["\"","\\"]  //any character except quote or backslash
    )* 
    "\"" > 
| < DOUBLEPOINT: ":" >}

//reserved words
TOKEN :
{< OUTPUT: "Output" >
| < PATHS: "paths" >
| < PLACES: "places" >
| < FROM: "from" >
| < TO: "to" >
| < CRITERIA: "criteria" >
| < WITH: "with" >
| < DISTANCE: "distance" >
}

//OPERATORS
TOKEN :
{	< COMPARE: "<=" | ">=" | "=" | "<" | ">" >
}SimpleNode  Start() #START:
{
  
}
{
output() {return jjtThis;}
}

void output() #OUTPUT :{
 }
{ < OUTPUT > (numberOfPaths() | placesAtDistance())}

void numberOfPaths()#NUMBER_OF_PATHS:{
 }
{
number()<PATHS ><FROM >place()<TO >place()<DOUBLEPOINT ><CRITERIA ><DOUBLEPOINT > criteriaType()
  }

void placesAtDistance() #PLACES_AT_DISTANCE:
{
  
}
{
< PLACES ><WITH ><DISTANCE ><COMPARE >number()<PLACES ><FROM >place()
  
}
void place() #PLACE :
{
   Token t;
}
{
 t=< QUOTED>  {jjtThis.value = t.image;}
}

void number() #NUMBER:{
   Token t;}{
 t=< NUMBER>  {jjtThis.value = t.image;}}

void  criteriaType() #CRITERIA_TYPE:
{
  Token t;
}
{
t=<CRITERIA_TYPE >  {jjtThis.value = t.image;}
}
