/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(NavqParser)package parser;

import java.io.*;
import java.util.Hashtable;
import java.util.Enumeration;

 import org.jgrapht.*;
    import org.jgrapht.alg.*;
    import org.jgrapht.graph.*;
    import java.util.List;
import java.util.ArrayList;
import java.util.regex.Matcher;
import org.jgrapht.traverse.*;
import java.util.Collections;


import java.net.*;


public class NavqParser{
	public static Hashtable ST = new Hashtable();

	public static Hashtable getHashTable()
	{
	  return ST;	}
    
}




PARSER_END(NavqParser)SKIP :{  " "| "\r"| "\t"| "\n"}
//static tokensTOKEN :{ < NUMBER: (<DIGIT>)+>
|  <#DIGIT: ["0"-"9"]>
| < CRITERIA_TYPE: "shortest" | "fastest" >
| <QUOTED: 
    "\"" 
    (
         "\\" ~[]     //any escaped character
    |                 //or
        ~["\"","\\"]  //any character except quote or backslash
    )* 
    "\"" > 
| < DOUBLEPOINT: ":" >
| < CENAS: "\"" >}

//reserved words
TOKEN :
{< OUTPUT: "Output" >
| < PATHS: "paths" >
| < PLACES: "places" >
| < FROM: "from" >
| < TO: "to" >
| < CRITERIA: "criteria" >
| < WITH: "with" >
| < DISTANCE: "distance" >
}

//OPERATORS
TOKEN :
{	< COMPARE: "<=" | ">=" | "=" | "<" | ">" >
}SimpleNode  Start():
{
  
}
{
output() {return jjtThis;}
}

void output():{
 }
{
    < OUTPUT > (numberOfPaths() | placesAtDistance())  
  }
	
void numberOfPaths():{
 }
{
number() <PATHS ><FROM >places()<DOUBLEPOINT ><CRITERIA ><DOUBLEPOINT > criteriaType()
  }

void placesAtDistance():
{
  
}
{
< PLACES ><WITH ><DISTANCE > compareSign() number()<PLACES ><FROM >place()
  
}
void compareSign():
{
   Token t;
}
{
 t=<COMPARE >{jjtThis.value = t.image;
 //System.out.println(t.image);
	ST.put(t.image,new STC("compare_sign",t.image));
}
}
 
void places():
{}{
  place() <TO >place()}
void place():
{
   Token t;
}
{
 t=< QUOTED>  {jjtThis.value = t.image;
 //System.out.println(t.image);
 	ST.put(t.image,new STC("place",t.image));
 }
}

void number():{
   Token t;}{
 t=< NUMBER>  {jjtThis.value = t.image;
 	//System.out.println(t.image);
	ST.put(t.image,new STC("number",t.image));
 }}

void  criteriaType():
{
  Token t;
}
{
t=<CRITERIA_TYPE >  {jjtThis.value = t.image;
	//System.out.println(t.image);
   ST.put(t.image,new STC("criteria",t.image));
}
}