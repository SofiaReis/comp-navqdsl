/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(NavqParser)package parser;

import java.io.*;
import java.util.Hashtable;
import java.util.Enumeration;

 import org.jgrapht.*;
    import org.jgrapht.alg.*;
    import org.jgrapht.graph.*;
    import java.util.List;
import java.util.ArrayList;
import java.util.regex.Matcher;
import org.jgrapht.traverse.*;
import java.util.Collections;


import java.net.*;


public class NavqParser{
	public static Hashtable ST = new Hashtable();
	public static String missedDouble = "";

	public static Hashtable getHashTable()
	{
	  return ST;	}

public void PrintWarnings()
  {
    System.out.println("WARNING: You are beautiful!");
    if(missedDouble!= "")
    	System.out.println("Warning: You've missed doublepoint, in the following situation " + missedDouble);
    
  }
}




PARSER_END(NavqParser)SKIP :{  " "| "\r"| "\t"| "\n"}
//static tokensTOKEN :{ < NUMBER: (<DIGIT>)+>
|  <#DIGIT: ["0"-"9"]>
| < CRITERIA_TYPE: "shortest" | "fastest" >
| <QUOTED: 
    "\"" 
    (
         "\\" ~[]     //any escaped character
    |                 //or
        ~["\"","\\"]  //any character except quote or backslash
    )* 
    "\"" > 
| < DOUBLEPOINT: ":" >
| < CENAS: "\"" >}

//reserved words
TOKEN :
{< OUTPUT: "Output" >
| < PATHS: "paths" >
| < PLACES: "places" >
| < FROM: "from" >
| < TO: "to" >
| < CRITERIA: "criteria" >
| < WITH: "with" >
| < DISTANCE: "distance" >
}

//OPERATORS
TOKEN :
{	< COMPARE: "<=" | ">=" | "=" | "<" | ">" >
}

SimpleNode  Start():
{
  
}
{
output() {return jjtThis;}
}

void output():{
 }
{
   
   < OUTPUT >try{  
   (
     numberOfPaths()

   | placesAtDistance())
}
		catch( TokenMgrError e ) {
			System.out.println("There was an ERROR in the QUERIE! \nWaiting for querie Output\n  [number] paths from \"[place]\" to \"[place]\": criteria: [shortest|fastest]\n  places with distance [compare_sign] [number] places from \"[place]\"");
			System.exit( 0 );
			}
}


JAVACODE
void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != 5);
  System.out.println(t.kind + " " + t.image);
  

    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}


void numberOfPaths():{
	Token t1, t2 =null;
	}
{
    number()   <PATHS ><FROM >places()
   			((t1=<DOUBLEPOINT ><CRITERIA > )|t1=<CRITERIA >)   			{
   			  if(t1.image!=":")   			  {
   			    missedDouble+=" [: criteria] ";   			  }   			}

   			  ((t2=<DOUBLEPOINT > criteriaType())|criteriaType())
   			  {
   			  try   			  {   			    
   			  if(t2.image!=":")
   			  {
   			    missedDouble+=" [ criteria:] ";
   			  }   			}   			catch (NullPointerException e) {
    missedDouble+=" [ criteria:] ";
} 
   			}
  }

  

void placesAtDistance():
{
  
}
{
< PLACES ><WITH ><DISTANCE > compareSign() number()<PLACES ><FROM >place()
  
}
void compareSign():
{
   Token t;
}
{
try{  
 t=<COMPARE >{jjtThis.value = t.image;
 //System.out.println(t.image);
	ST.put(t.image,new STC("compare_sign",t.image));
}}
	catch( TokenMgrError e ) {
		System.out.println("ERROR: Invalid compare sign!");
		System.exit( 0 );
	}
}
 
void places():
{}{
try
{
  place()
}
	catch( TokenMgrError e ) {
		System.out.println("ERROR: Invalid departure place. Should be in format \"[place]\"!");
		System.exit( 0 );
	}

  <TO >

try{  place()
}
	catch( TokenMgrError e ) {
		System.out.println("ERROR: Invalid arrival place. Should be in format \"[place]\"!");
		System.exit( 0 );
	}
  }
void place():
{
   Token t;
}
{
 t=< QUOTED>  {jjtThis.value = t.image;
 //System.out.println(t.image);
 	ST.put(t.image,new STC("place",t.image));
 }
}

void number():{
   Token t;}{
  try  {    
 t=< NUMBER>  {jjtThis.value = t.image;
 	//System.out.println(t.image);
	ST.put(t.image,new STC("number",t.image));
	
}
}
	catch( TokenMgrError e ) {
		System.out.println("ERROR: Invalid number. Waiting for an Integer!");
		System.exit( 0 );
	}

}

void  criteriaType():
{
  Token t;
}
  
{
  try  {    
  (
	t=<CRITERIA_TYPE >
{jjtThis.value = t.image;
	//System.out.println(t.image);
   ST.put(t.image,new STC("criteria",t.image));
 }

)
}
	catch( TokenMgrError e ) {
		System.out.println("ERROR: Invalid criteria type. Waiting for criteria:shortest or fastest!");
		System.exit( 0 );
	}
}