/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(NavqParser)
package parser;

import java.io.*;
import java.util.Hashtable;
import java.util.Enumeration;

 import org.jgrapht.*;
    import org.jgrapht.alg.*;
    import org.jgrapht.graph.*;
    import java.util.List;


import java.net.*;

public class NavqParser
{
	public static Hashtable ST = new Hashtable();
	
 
	
  
  public static void main(String args []) throws ParseException
  {
	String temp;
    STC    temp2;

    
    NavqParser parser = new NavqParser(System.in);
    
  try
    {
      
    SimpleNode root = parser.Start();
    root.dump("");
   }
   catch (ParseException e) {
                        System.out.println("Parse error: " + e);
                        return;
            }
    catch (TokenMgrError e) {
                        System.out.println("Token error: " + e);
                        return;
    }
     System.out.println("Successful parse");



	 Enumeration t = ST.keys();
	
     while (t.hasMoreElements() == true) {

          temp = (String)t.nextElement();
          temp2 = (STC)ST.get(temp);
          System.out.println(temp);
          if ( temp2.type != null )
            System.out.println(" type = " + temp2.type);
          if ( temp2.value != null )
            System.out.println(" value = " + temp2.value);

    }

 SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>  graph = 
            new SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class); 
            graph.addVertex("v1");
            graph.addVertex("v2");
            graph.addVertex("v3");
            graph.addVertex("v4");
            graph.addVertex("v5");


            DefaultWeightedEdge e1 = graph.addEdge("v1", "v2"); 
            graph.setEdgeWeight(e1, 5); 

            DefaultWeightedEdge e2 = graph.addEdge("v2", "v3"); 
            graph.setEdgeWeight(e2, 3); 

            DefaultWeightedEdge e3 = graph.addEdge("v4", "v5"); 
            graph.setEdgeWeight(e3, 6); 

            DefaultWeightedEdge e4 = graph.addEdge("v2", "v4"); 
            graph.setEdgeWeight(e4, 2); 

            DefaultWeightedEdge e5 = graph.addEdge("v5", "v4"); 
            graph.setEdgeWeight(e5, 4); 


            DefaultWeightedEdge e6 = graph.addEdge("v2", "v5"); 
            graph.setEdgeWeight(e6, 9); 

            DefaultWeightedEdge e7 = graph.addEdge("v4", "v1"); 
            graph.setEdgeWeight(e7, 7); 

            DefaultWeightedEdge e8 = graph.addEdge("v3", "v2"); 
            graph.setEdgeWeight(e8, 2); 

            DefaultWeightedEdge e9 = graph.addEdge("v1", "v3"); 
            graph.setEdgeWeight(e9, 10); 

            DefaultWeightedEdge e10 = graph.addEdge("v3", "v5"); 
            graph.setEdgeWeight(e10, 1); 


            System.out.println("Shortest path from v1 to v5:");
            List shortest_path =   DijkstraShortestPath.findPathBetween(graph, "v1", "v5");
            System.out.println(shortest_path);
    
   
  }



  


 
}



PARSER_END(NavqParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}


//static tokens
TOKEN :
{
 < NUMBER: (<DIGIT>)+>
|  <#DIGIT: ["0"-"9"]>
| < CRITERIA_TYPE: "shortest" | "fastest" >
| <QUOTED: 
    "\"" 
    (
         "\\" ~[]     //any escaped character
    |                 //or
        ~["\"","\\"]  //any character except quote or backslash
    )* 
    "\"" > 
| < DOUBLEPOINT: ":" >
| < CENAS: "\"" >
}

//reserved words
TOKEN :
{
< OUTPUT: "Output" >
| < PATHS: "paths" >
| < PLACES: "places" >
| < FROM: "from" >
| < TO: "to" >
| < CRITERIA: "criteria" >
| < WITH: "with" >
| < DISTANCE: "distance" >
}

//OPERATORS
TOKEN :
{
	< COMPARE: "<=" | ">=" | "=" | "<" | ">" >
}

SimpleNode  Start() #START:
{
  
}
{
output() {return jjtThis;}
}

void output() #OUTPUT :
{
 
}
{ < OUTPUT > (numberOfPaths() | placesAtDistance())
}
	
void numberOfPaths()#NUMBER_OF_PATHS:
{
 
}
{
number() <PATHS ><FROM >places()<DOUBLEPOINT ><CRITERIA ><DOUBLEPOINT > criteriaType()
  
}

void placesAtDistance() #PLACES_AT_DISTANCE:
{
  
}
{
< PLACES ><WITH ><DISTANCE > compareSign() number()<PLACES ><FROM >place()
  
}
void compareSign() #COMPARE_SIGN:
{
   Token t;
}
{
 t=<COMPARE >{jjtThis.value = t.image;
 ST.put(t.image,new STC("compare_sign",t.image));}
}
 
void places() #TO:
{
}
{
  place() <TO >place()
}
void place() #PLACE :
{
   Token t;
}
{
 t=< QUOTED>  {jjtThis.value = t.image;
 ST.put(t.image,new STC("place",t.image));}
}

void number() #NUMBER:
{
   Token t;
}
{
 t=< NUMBER>  {jjtThis.value = t.image;
	ST.put(t.image,new STC("number",t.image));
 }
}

void  criteriaType() #CRITERIA_TYPE:
{
  Token t;
}
{
t=<CRITERIA_TYPE >  {jjtThis.value = t.image;
   ST.put(t.image,new STC("criteria",t.image));
}
}

