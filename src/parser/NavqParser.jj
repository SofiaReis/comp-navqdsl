/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. NavqParser.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(NavqParser)package parser;

public class NavqParser/*@bgen(jjtree)*/implements NavqParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTNavqParserState jjtree = new JJTNavqParserState();

/*@egen*/  public static void main(String args []) throws ParseException  {    NavqParser parser = new NavqParser(System.in);
    SimpleNode root = parser.Start();
    root.dump("");
      }}PARSER_END(NavqParser)SKIP :{  " "| "\r"| "\t"| "\n"}
//static tokensTOKEN :{ < NUMBER: (<DIGIT>)+>
|  <#DIGIT: ["0"-"9"]>
| < CRITERIA_TYPE: "shortest" | "fastest" >
| <QUOTED: 
    "\"" 
    (
         "\\" ~[]     //any escaped character
    |                 //or
        ~["\"","\\"]  //any character except quote or backslash
    )* 
    "\"" > 
| < DOUBLEPOINT: ":" >}

//reserved words
TOKEN :
{< OUTPUT: "Output" >
| < PATHS: "paths" >
| < PLACES: "places" >
| < FROM: "from" >
| < TO: "to" >
| < CRITERIA: "criteria" >
| < WITH: "with" >
| < DISTANCE: "distance" >
}

//OPERATORS
TOKEN :
{	< COMPARE: "<=" | ">=" | "=" | "<" | ">" >
}SimpleNode  Start()       :
{/*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  
}
{/*@bgen(jjtree) START */
try {
/*@egen*/
output()/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void output()         :{/*@bgen(jjtree) OUTPUT */
  SimpleNode jjtn000 = new SimpleNode(JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
 }
{/*@bgen(jjtree) OUTPUT */
  try {
/*@egen*/ < OUTPUT > (numberOfPaths() | placesAtDistance())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void numberOfPaths()                :{/*@bgen(jjtree) NUMBER_OF_PATHS */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER_OF_PATHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
 }
{/*@bgen(jjtree) NUMBER_OF_PATHS */
try {
/*@egen*/
number()<PATHS ><FROM >place()<TO >place()<DOUBLEPOINT ><CRITERIA ><DOUBLEPOINT > criteriaType()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
  }

void placesAtDistance()                    :
{/*@bgen(jjtree) PLACES_AT_DISTANCE */
  SimpleNode jjtn000 = new SimpleNode(JJTPLACES_AT_DISTANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  
}
{/*@bgen(jjtree) PLACES_AT_DISTANCE */
try {
/*@egen*/
< PLACES ><WITH ><DISTANCE ><COMPARE >number()<PLACES ><FROM >place()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
  
}
void place()        :
{/*@bgen(jjtree) PLACE */
   SimpleNode jjtn000 = new SimpleNode(JJTPLACE);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) PLACE */
 try {
/*@egen*/
 t=< QUOTED>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  {jjtn000.value = t.image;}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void number()        :{/*@bgen(jjtree) NUMBER */
   SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;}{/*@bgen(jjtree) NUMBER */
 try {
/*@egen*/
 t=< NUMBER>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  {jjtn000.value = t.image;}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}

void  criteriaType()               :
{/*@bgen(jjtree) CRITERIA_TYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTCRITERIA_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) CRITERIA_TYPE */
try {
/*@egen*/
t=<CRITERIA_TYPE >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/  {jjtn000.value = t.image;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
