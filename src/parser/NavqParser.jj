/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. NavqParser.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(NavqParser)
package parser;

import java.io.*;
import java.util.Hashtable;
import java.util.Enumeration;
import java.util.ArrayList;

 import org.jgrapht.*;
    import org.jgrapht.alg.*;
    import org.jgrapht.graph.*;
    import java.util.List;


import java.net.*;

public class NavqParser/*@bgen(jjtree)*/implements NavqParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTNavqParserState jjtree = new JJTNavqParserState();

/*@egen*/
	public static Hashtable ST = new Hashtable();
	
 
	
  
  public static void main(String args []) throws ParseException
  {
	String temp;
    STC    temp2;

    
    NavqParser parser = new NavqParser(System.in);
    
  try
    {
      
    SimpleNode root = parser.Start();
    root.dump("");
   }
   catch (ParseException e) {
                        System.out.println("Parse error: " + e);
                        return;
            }
    catch (TokenMgrError e) {
                        System.out.println("Token error: " + e);
                        return;
    }
     System.out.println("Successful parse");



	 Enumeration t = ST.keys();
	
     while (t.hasMoreElements() == true) {

          temp = (String)t.nextElement();
          temp2 = (STC)ST.get(temp);
          System.out.println(temp);
          if ( temp2.type != null )
            System.out.println(" type = " + temp2.type);
          if ( temp2.value != null )
            System.out.println(" value = " + temp2.value);

    }

    List<String > graphdata = new ArrayList<String >();
    String filename = "./data/small.NY.gr";
    try    {
      	
	    BufferedReader reader = new BufferedReader(new FileReader(filename));
	    String line;
	    while ((line = reader.readLine()) != null)
	    {
	   	   graphdata.add(line);
	    }
	    reader.close();
	  }
	  catch (Exception e)
	  {
	    System.err.format("Exception occurred trying to read '%s'.", filename);
	    e.printStackTrace();
	  }    

 SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>  graph = 
            new SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class); 
            graph.addVertex("v1");
            graph.addVertex("v2");
            graph.addVertex("v3");
            graph.addVertex("v4");
            graph.addVertex("v5");


            DefaultWeightedEdge e1 = graph.addEdge("v1", "v2"); 
            graph.setEdgeWeight(e1, 5); 

            DefaultWeightedEdge e2 = graph.addEdge("v2", "v3"); 
            graph.setEdgeWeight(e2, 3); 

            DefaultWeightedEdge e3 = graph.addEdge("v4", "v5"); 
            graph.setEdgeWeight(e3, 6); 

            DefaultWeightedEdge e4 = graph.addEdge("v2", "v4"); 
            graph.setEdgeWeight(e4, 2); 

            DefaultWeightedEdge e5 = graph.addEdge("v5", "v4"); 
            graph.setEdgeWeight(e5, 4); 


            DefaultWeightedEdge e6 = graph.addEdge("v2", "v5"); 
            graph.setEdgeWeight(e6, 9); 

            DefaultWeightedEdge e7 = graph.addEdge("v4", "v1"); 
            graph.setEdgeWeight(e7, 7); 

            DefaultWeightedEdge e8 = graph.addEdge("v3", "v2"); 
            graph.setEdgeWeight(e8, 2); 

            DefaultWeightedEdge e9 = graph.addEdge("v1", "v3"); 
            graph.setEdgeWeight(e9, 10); 

            DefaultWeightedEdge e10 = graph.addEdge("v3", "v5"); 
            graph.setEdgeWeight(e10, 1); 


            System.out.println("Shortest path from v1 to v5:");
            List shortest_path =   DijkstraShortestPath.findPathBetween(graph, "v1", "v5");
            System.out.println(shortest_path);  
  } 
}



PARSER_END(NavqParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}


//static tokens
TOKEN :
{
 < NUMBER: (<DIGIT>)+>
|  <#DIGIT: ["0"-"9"]>
| < CRITERIA_TYPE: "shortest" | "fastest" >
| <QUOTED: 
    "\"" 
    (
         "\\" ~[]     //any escaped character
    |                 //or
        ~["\"","\\"]  //any character except quote or backslash
    )* 
    "\"" > 
| < DOUBLEPOINT: ":" >
| < CENAS: "\"" >
}

//reserved words
TOKEN :
{
< OUTPUT: "Output" >
| < PATHS: "paths" >
| < PLACES: "places" >
| < FROM: "from" >
| < TO: "to" >
| < CRITERIA: "criteria" >
| < WITH: "with" >
| < DISTANCE: "distance" >
}

//OPERATORS
TOKEN :
{
	< COMPARE: "<=" | ">=" | "=" | "<" | ">" >
}

SimpleNode  Start()       :
{/*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  
}
{/*@bgen(jjtree) START */
try {
/*@egen*/
output()/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void output()         :
{/*@bgen(jjtree) OUTPUT */
  SimpleNode jjtn000 = new SimpleNode(JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
 
}
{/*@bgen(jjtree) OUTPUT */
  try {
/*@egen*/ < OUTPUT > (numberOfPaths() | placesAtDistance())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
	
void numberOfPaths()                :
{/*@bgen(jjtree) NUMBER_OF_PATHS */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER_OF_PATHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
 
}
{/*@bgen(jjtree) NUMBER_OF_PATHS */
try {
/*@egen*/
number() <PATHS ><FROM >places()<DOUBLEPOINT ><CRITERIA ><DOUBLEPOINT > criteriaType()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
  
}

void placesAtDistance()                    :
{/*@bgen(jjtree) PLACES_AT_DISTANCE */
  SimpleNode jjtn000 = new SimpleNode(JJTPLACES_AT_DISTANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  
}
{/*@bgen(jjtree) PLACES_AT_DISTANCE */
try {
/*@egen*/
< PLACES ><WITH ><DISTANCE > compareSign() number()<PLACES ><FROM >place()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
  
}
void compareSign()              :
{/*@bgen(jjtree) COMPARE_SIGN */
   SimpleNode jjtn000 = new SimpleNode(JJTCOMPARE_SIGN);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) COMPARE_SIGN */
 try {
/*@egen*/
 t=<COMPARE >/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/{jjtn000.value = t.image;
 ST.put(t.image,new STC("compare_sign",t.image));}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
 
void places()    :
{/*@bgen(jjtree) TO */
  SimpleNode jjtn000 = new SimpleNode(JJTTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) TO */
  try {
/*@egen*/
  place() <TO >place()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void place()        :
{/*@bgen(jjtree) PLACE */
   SimpleNode jjtn000 = new SimpleNode(JJTPLACE);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) PLACE */
 try {
/*@egen*/
 t=< QUOTED>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  {jjtn000.value = t.image;
 ST.put(t.image,new STC("place",t.image));}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void number()        :
{/*@bgen(jjtree) NUMBER */
   SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) NUMBER */
 try {
/*@egen*/
 t=< NUMBER>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  {jjtn000.value = t.image;
	ST.put(t.image,new STC("number",t.image));
 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void  criteriaType()               :
{/*@bgen(jjtree) CRITERIA_TYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTCRITERIA_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) CRITERIA_TYPE */
try {
/*@egen*/
t=<CRITERIA_TYPE >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/  {jjtn000.value = t.image;
   ST.put(t.image,new STC("criteria",t.image));
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

